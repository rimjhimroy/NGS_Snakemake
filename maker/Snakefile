"""Run the maker annotation pipeline"""

import json, os, inspect
import configparser
import io

# Get the config file:
with open("config.json") as f:
    CONFIG = json.load(f)

# Set some basic variables (snakemake doesn't always allow these calls directly in rules
working_dir = CONFIG['base']['working_dir']
maker_out = ".".join(CONFIG["maker_opts"]["genome"].split(".")[:-1]) + ".output"

""" This function takes the maker configuration file ctl and overrides settings if found in the relevant section of config.json"""
def read_maker_opts_ctl(section, ctl):
    config = configparser.RawConfigParser()
    config.optionxform = str # Return options as they are, do not convert to lowercase
    config.read(ctl)
    # All settings are in the "maker" section
    # Loop over all the settings, and if a matching entry is found in config.json, replace
    for c in config.items("maker"):
        if c[0] in CONFIG[section]:
            config.set("maker", c[0], CONFIG[section][c[0]])
    # Place the new configuration in a single string:
    output = io.StringIO()
    config.write(output,space_around_delimiters=False)
    return output.getvalue()

""" maker doesn't give proper output, so we need our own flag file"""
rule all:
    input: expand("{working_dir}/maker_done.txt", working_dir=working_dir)

""" use this rule to clean-up maker settings """
rule clean_maker:
    shell: "rm -f {working_dir}/maker_*.ctl {working_dir}/maker_done.txt"

""" use this rule to clean-up all the data produced by maker """
rule clean_data:
    shell: "rm -rf {working_dir}/{maker_out}"

""" create the maker_bopts.ctl file """
""" TODO : use maker -BOPTS to generate the file from scratch """
rule maker_bopts:
    input: "maker_bopts.ctl.conf"
    params : configured = read_maker_opts_ctl("maker_bopts", "maker_bopts.ctl.conf")
    output: "{working_dir}/maker_bopts.ctl"
    shell: 'echo -e "{params.configured}" | grep -v "\[maker\]" > {output}'

""" create the maker_opts.ctl file """
""" TODO : use maker -OPTS to generate the file from scratch """
rule maker_opts:
    input: "maker_opts.ctl.conf"
    params : configured = read_maker_opts_ctl("maker_opts", "maker_opts.ctl.conf")
    output: "{working_dir}/maker_opts.ctl"
    shell: 'echo -e "{params.configured}" | grep -v "\[maker\]" > {output}'

""" create the maker_exe.ctl file """
""" TODO : use maker -EXE to generate the file from scratch """
rule maker_exe:
    input: "maker_exe.ctl.conf"
    params : configured = read_maker_opts_ctl("maker_exe", "maker_exe.ctl.conf")
    output: "{working_dir}/maker_exe.ctl"
    shell: 'echo -e "{params.configured}" | grep -v "\[maker\]" > {output}'

# Install maker dependancies :

# Download and install Augustus
rule augustus_installation:
    output: CONFIG["base"]["maker_helpers_dir"] + 'augustus'
    shell:
        "TEMPDIR=`mktemp -d`;"
        "cd $TEMPDIR;"
        "wget"+CONFIG['maker_installation']['wget_options']+CONFIG['maker_installation']['augustus_URL']+";"
        "tar xzf augustus*;"
        "rm *.tar.*;"
        "mv -v augustus* {output};"
        "touch {output} && "
        "echo 'export PATH='`readlink -f {output}/bin/`':$PATH' >>" + CONFIG['base']['maker.bashrc'] + ";"
        "echo 'export AUGUSTUS_CONFIG_PATH='`readlink -f {output}/config/`  >>"+ CONFIG['base']['maker.bashrc'] + ";"
        "cd / && rmdir -v $TEMPDIR;"

# Download and install Exonerate
rule exonerate_installation:
    output: CONFIG["base"]["maker_helpers_dir"] + 'exonerate'
    shell:
        "TEMPDIR=`mktemp -d`;"
        "cd $TEMPDIR;"
        "wget"+CONFIG['maker_installation']['wget_options']+CONFIG['maker_installation']['exonerate_URL']+";"
        "tar xzf exonerate*;"
        "rm *.tar.*;"
        "mv -v exonerate* {output};"
        "touch {output} && "
        "echo 'export PATH='`readlink -f {output}/bin/`':$PATH' >>" + CONFIG['base']['maker.bashrc'] + ";"
        "cd / && rmdir -v $TEMPDIR;"

# Download and install SNAP
rule snap_installation:
    output: CONFIG["base"]["maker_helpers_dir"] + 'snap'
    shell:
        "TEMPDIR=`mktemp -d`;"
        "cd $TEMPDIR;"
        "wget"+CONFIG['maker_installation']['wget_options']+CONFIG['maker_installation']['snap_URL']+";"
        "tar xzf snap*;"
        "rm *.tar.*;"
        "mv -v snap* {output};"
        "touch {output} && "
        "cd {output} && make;"
        "echo 'export ZOE='`readlink -f {output}` >>" + CONFIG['base']['maker.bashrc'] + ";"
        "echo 'export PATH='`readlink -f {output}`':$PATH' >>" + CONFIG['base']['maker.bashrc'] + ";"
        "cd / && rmdir -v $TEMPDIR;"

# Download and install TRF
rule trf_installation:
    output: CONFIG["base"]["maker_helpers_dir"] + 'trf/trf'
    shell:
        "mkdir -p `dirname {output}` && "
        "cd `dirname {output}` && "
        "wget"+CONFIG['maker_installation']['wget_options']+CONFIG['maker_installation']['trf_URL']+" && "
        "mv -v trf* trf && "
        "chmod -v ugo+x trf && "
        "touch {output} && "
        "echo 'export PATH='`readlink -f {output}`':$PATH' >>" + CONFIG['base']['maker.bashrc'] + ";"

# Download and install BLAST+
rule blast_plus_installation:
    output: CONFIG["base"]["maker_helpers_dir"] + 'blast+'
    shell:
        "TEMPDIR=`mktemp -d`;"
        "cd $TEMPDIR;"
        "wget"+CONFIG['maker_installation']['wget_options']+CONFIG['maker_installation']['blast+_URL']+" && "
        "tar xzf ncbi* && "
        "rm *.tar.* && "
        "mv -v ncbi* {output} && "
        "touch {output} && "
        "echo 'export PATH='`readlink -f {output}/bin`':$PATH' >>" + CONFIG['base']['maker.bashrc'] + ";"
        "cd / && rmdir -v $TEMPDIR;"

# Download and install RMBLAST plus corresponding BLAST+
rule rmblast_installation:
    output: CONFIG["base"]["maker_helpers_dir"] + 'rmblast'
    shell:
        "TEMPDIR=`mktemp -d`;"
        "cd $TEMPDIR;"
        "wget"+CONFIG['maker_installation']['wget_options']+CONFIG['maker_installation']['rmblast_URL']+" && "
        "tar xzf ncbi-blast* && "
        "tar xzf ncbi-rmblast* && "
        "rm -v *.tar.* && "
        "cp -R ncbi-rmblast*/* ncbi-blast*/ &&"
        "mv -v ncbi-blast* {output} && "
        "touch {output} && "
        "cd / && rm -vrf $TEMPDIR;"

# Download and install GIRI RepBase
rule repbase_installation:
    output: CONFIG["base"]["maker_helpers_dir"] + 'repbase'
    shell:
        "TEMPDIR=`mktemp -d`;"
        "pushd $TEMPDIR && "
        "curl --remote-name --anyauth --netrc-file "+CONFIG['maker_installation']['repeatmaskerlibraries_URL_netrc']+" "+CONFIG['maker_installation']['repeatmaskerlibraries_URL']+" && "
        "tar xzf repeatmaskerlibraries* && "
        "mv -v Libraries {output} && "
        "touch {output} && "
        "cd / && rm -vrf $TEMPDIR;"

# Download and install Repeatmasker
rule repeatmasker_installation:
    input:
        REPBASE=rules.repbase_installation.output,
        RMBLAST=rules.rmblast_installation.output,
        TRF=rules.trf_installation.output
    output: CONFIG["base"]["maker_helpers_dir"] + 'repeatmasker'
    shell:
        "TEMPDIR=`mktemp -d`;"
        "cd $TEMPDIR;"
        "wget"+CONFIG['maker_installation']['wget_options']+CONFIG['maker_installation']['repeatmasker_URL']+" && "
        "tar xzf RepeatMasker-open-* && "
        "rm -v *.tar.* && "
        "mv -v RepeatMasker* {output} && "
        "cd {output} && grep -l -r '#!/u1' * | xargs -I '%' sed -i 's|/u1/local/bin/perl|/usr/bin/env perl|' % && "
        "cp RepeatMaskerConfig.tmpl RepeatMaskerConfig.pm && chmod -x RepeatMaskerConfig.pm && "
        'sed -i \'s|DEFAULT_SEARCH_ENGINE\s\+=.*|DEFAULT_SEARCH_ENGINE = "ncbi";|\' RepeatMaskerConfig.pm && '
        'sed -i \'s|TRF_PRGM\s\+=.*|TRF_PRGM = "' + "{input.TRF}" + '";|\' RepeatMaskerConfig.pm && '
        'sed -i \'s|RMBLAST_DIR\s\+=.*|RMBLAST_DIR = "' + "{input.RMBLAST}" + '/bin";|\' RepeatMaskerConfig.pm && '
        "cp -v {input.REPBASE}/RepeatMaskerLib.embl Libraries/ ; "
        "touch {output} && "
        "echo 'export PATH='`readlink -f {output}`':$PATH' >>" + CONFIG['base']['maker.bashrc'] + " && "
        "cd / && rm -rv $TEMPDIR;"


#  Download and install Maker
# TODO : Fix output handling, this is ugly

rule maker_installation:
    input:
        rules.repeatmasker_installation.output,
        rules.blast_plus_installation.output,
        rules.snap_installation.output,
        rules.exonerate_installation.output,
        rules.augustus_installation.output
    output: CONFIG["base"]["maker_installation_dir"]+"maker/bin/maker"
    shell:
        "TEMPDIR=`mktemp -d`;"
        "cd $TEMPDIR;"
        "wget"+CONFIG['maker_installation']['wget_options']+CONFIG['maker_installation']['maker_URL']+" && "
        "tar xzf maker* && "
        "rm -v maker*.tgz && "
        "touch maker && "
        "cp --recursive maker "+CONFIG["base"]["maker_installation_dir"] +" && "
        "cd / && rm -rv $TEMPDIR;"
        "cd "+CONFIG["base"]["maker_installation_dir"] +"maker/src && source " + CONFIG['base']['maker.bashrc'] + " && "
        "perl Build.PL &&"
        "./Build install"

"""" rule to run maker based on the given configuration """
rule maker:
    input:
        rules.maker_bopts.output,
        rules.maker_opts.output,
        rules.maker_exe.output,
        MAKER=rules.maker_installation.output
    output: "{working_dir}/maker_done.txt"
    shell: 'cd {working_dir} && '
           "source " + CONFIG['base']['maker.bashrc'] + " && "
           '{input.MAKER} &&'
           'touch {working_dir}/maker_done.txt'
