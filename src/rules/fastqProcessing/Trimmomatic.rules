"""
@author: Jetse
@version: 0.1

Trimming of fastq files. For usage, include this in your workflow.

Required programs:
* trimmomatic

Expects a global variable CONFIG (e.g. parsed from json) of at least the following structure:
{
    "illuminaAdapters": "/path/to/adapters",

    "trimmomatic":{
        "jar": "/home/jaco001/programs/trimmomatic-0.32.jar",
        "seedMisMatches": 2,
        "palindromeClipTreshold": 30,
        "simpleClipThreshhold": 10,
        "LeadMinTrimQual": 3,
        "TrailMinTrimQual": 3,
        "windowSize": 4,
        "avgMinQual": 15,
        "minReadLen": 36,
        "phred" : "-phred33"
    }

}
Expects the input files in the working directory. For paired end data the files have to end with _1.fastq (forward reads) and
_2.fastq (reversed reads).

"""
###############
##  Imports  ##
###############
from qualityControl.files import FastqFile
import collections, subprocess

###################
##  Trimmomatic  ##
###################
ruleorder: trimmomaticPaired > trimmomaticSingle

# Download and install Trimmomatic
rule trimmomatic_installation:
    output:
        CONFIG["trimmomatic"]["jar"],
        CONFIG["illuminaAdapters"]
    shell:
        "TEMPDIR=`mktemp -d`;"
        "cd $TEMPDIR;"
        "wget " + CONFIG['trimmomatic']['URL'] + " -O trimmomatic.zip && "
        "unzip trimmomatic.zip && "
        "rm trimmomatic.zip && "
        "mkdir -p " + CONFIG["picardTools"]["path"] + " && "
        "mv Trimmomatic*/* " + CONFIG["picardTools"]["path"] + " &&"
        "touch " + CONFIG["picardTools"]["path"] + "/* && "
        "rmdir Trimmomatic* && "
        "cd / && rmdir $TEMPDIR;"

rule trimmomaticPaired:
    input:
        TRIMMOMATIC=rules.trimmomatic_installation.output,
        ADAPTERFILE=CONFIG["illuminaAdapters"],
        forward = "raw_reads/{sample}_1.fastq",
        reversed = "raw_reads/{sample}_2.fastq"
    output:
        forward = "processed/trim.{sample}_1.fastq",
        reversed = "processed/trim.{sample}_2.fastq",
        forwardUnpaired = "processed/trim.{sample}_unpaired_1.fastq",
        reversedUnpaired = "processed/trim.{sample}_unpaired_2.fastq"
    threads: 20
    run:
        TrimOpts = collections.namedtuple("TrimOpts", CONFIG["trimmomatic"].keys())
        trimOpts = TrimOpts(**CONFIG["trimmomatic"])
        shell("java -jar {input.TRIMMOMATIC} PE {trimOpts.phred} -threads {threads} "
            "{input.forward} {input.reversed} {output.forward} {output.forwardUnpaired} {output.reversed} {output.reversedUnpaired}  "
            "ILLUMINACLIP:{input.ADAPTERFILE}:{trimOpts.seedMisMatches}:{trimOpts.palindromeClipTreshold}:{trimOpts.simpleClipThreshhold} "
            "LEADING:{trimOpts.LeadMinTrimQual} "
            "TRAILING:{trimOpts.TrailMinTrimQual} "
            "SLIDINGWINDOW:{trimOpts.windowSize}:{trimOpts.avgMinQual} "
            "MINLEN:{trimOpts.minReadLen}"
            )
        FastqFile.FastqFile(output.forward, output.reversed).isValid(dna=True)

rule trimmomaticSingle:
    input:
        TRIMMOMATIC=rules.trimmomatic_installation.output,
        ADAPTERFILE=CONFIG["illuminaAdapters"],
        FASTQ="processed/{sample}.fastq"
    output: "processed/trim.{sample}.fastq"
    threads: 20
    run:
        TrimOpts = collections.namedtuple("TrimOpts", CONFIG["trimmomatic"].keys())
        trimOpts = TrimOpts(**CONFIG["trimmomatic"])
        shell("java -jar {input.TRIMMOMATIC} SE {trimOpts.phred} -threads {threads} "
            "{input.FASTQ} {output} "
            "ILLUMINACLIP:{input.ADAPTERFILE}:{trimOpts.seedMisMatches}:{trimOpts.palindromeClipTreshold}:{trimOpts.simpleClipThreshhold} "
            "LEADING:{trimOpts.LeadMinTrimQual} "
            "TRAILING:{trimOpts.TrailMinTrimQual} "
            "SLIDINGWINDOW:{trimOpts.windowSize}:{trimOpts.avgMinQual} "
            "MINLEN:{trimOpts.minReadLen}"
            )
        FastqFile.FastqFile(output[0]).isValid(dna=True)