#############
##  Maker  ##
#############

import os, subprocess
import configparser
from Maker import *

""" use this rule to clean-up all the data produced by maker """
rule clean_data:
    shell: "rm -rf " + CONFIG['base']['working_dir']

rule clean_perl:
    shell: "rm -rf " + CONFIG["base"]["perl_install"]

# Install maker dependencies :
# Create .bashrc to store settings and paths
rule braker_bashrc:
    output : CONFIG['base']['braker_bashrc']
    params : dir = strip_path_level(CONFIG['base']['braker_bashrc'],1)
    priority: 5000
    shell :
        "mkdir -p {params.dir} && "
        "touch {output}"
        
rule tophat2_installation:
    output: CONFIG["executables"]["tophat2"]
    params: dir = strip_path_level(CONFIG["executables"]["tophat2"],1)
    shell:
        "TEMPDIR=`mktemp -p " + CONFIG["base"]["download_dir"] + " -d` && "
        "cd $TEMPDIR && "
        "wget"+CONFIG['executable_sources']['wget_options']+CONFIG['executable_sources']['tophat2_URL']+" && "
        "tar xzf *.tar.gz && "
        "cp -R tophat*/* {params.dir} && "
        "cd / && rm -rf $TEMPDIR && "
        "touch {output};"
        
# Download and install Augustus
rule augustus_installation:
    output: CONFIG["executables"]["augustus"]
    params: dir = strip_path_level(CONFIG["executables"]["augustus"],2)
    shell:
        "TEMPDIR=`mktemp -p " + CONFIG["base"]["download_dir"] + " -d` && "
        "cd $TEMPDIR && "
        "wget"+CONFIG['executable_sources']['wget_options']+CONFIG['executable_sources']['augustus_URL']+" && "
        "tar xzf augustus* && "
        "rm *.tar.* && "
        "cp -R augustus*/* {params.dir} && "
        "cd / && rm -rf $TEMPDIR && "
        "touch {output};"

rule bamtools_installation:
    output: CONFIG["executables"]["bamtools"]
    params: dir = strip_path_level(CONFIG["executables"]["bamtools"],1)
    shell:
        "mkdir -p {params.dir} && cd {params.dir} && "
        "git clone " + CONFIG["executable_sources"]["bamtools_URL"] + " && "
        "mkdir build && cd build && cmake .. && cd .. && make "
  
rule genemark_installation:
    output: CONFIG["executables"]["genemark"]
    params: dir = CONFIG["executables"]["genemark"]
    shell:
        "TEMPDIR=`mktemp -p " + CONFIG["base"]["download_dir"] + " -d` && "
        "cd $TEMPDIR && "
        "wget"+CONFIG['executable_sources']['wget_options']+CONFIG['executable_sources']['genemark_URL']+" && "
        "tar zxf *.tar.gz && "
        "cd gm_et_linux_64/gmes_petap && "
        "grep -l -r '#!/usr' *.pl | xargs -I '%' sed -i 's|/usr/bin/perl|/usr/bin/env perl|' % &&"
        "mkdir -p {params.dir} && " 
        "cp -R * " + CONFIG["executables"]["genemark"] + " && "
        "cp gm_key " + CONFIG["base"]["home_dir"] + ".gm_key && "
        "cd / && rm -rf $TEMPDIR && "
        "touch {output};"

# Install perl if version is too low (as on our cluster)
rule install_perl:
   output: CONFIG["executables"]["perl"]
   shell:
        "wget --no-check-certificate -O - http://install.perlbrew.pl | bash && "
        "source " + CONFIG["base"]["perl_brew"] + "etc/bashrc && "
        "perlbrew " + CONFIG["base"]["perl_brew_options"] + " install " + CONFIG["base"]["perl_version"] + " && "
        "perlbrew switch " + CONFIG["base"]["perl_version"] + " && "
        "cat " + CONFIG["base"]["perl_brew"] + "etc/bashrc >> {rules.braker_bashrc.output} && "
        "echo 'perlbrew switch " + CONFIG["base"]["perl_version"] + "' >>  {rules.braker_bashrc.output} && "
        "touch {output};"

# Create local Perl library
rule install_perl_cpanm:
    input:
        PERL=rules.install_perl.output
    output: CONFIG["executables"]["cpanm"]
    shell:
        "source {rules.braker_bashrc.output} && "
        "perlbrew install-cpanm && "
        "touch {output}"

# Install necessary Perl libraries
rule install_perl_libs:
    input:
        rules.install_perl_cpanm.output,
        rules.install_perl.output
    output: CONFIG["base"]["perl_install"] + "lib/done_braker"
    run:
        for lib in CONFIG["base"]["perl_libs"]:
            shell("source  {rules.braker_bashrc.output} ; cpanm "+ CONFIG["base"]["perl_cpanm_options"] + " " + lib)
        shell("touch " + CONFIG["base"]["perl_install"] + "lib/done_braker")


rule braker_installation:
    input:
        rules.augustus_installation.output,
        rules.genemark_installation.output,
        rules.bamtools_installation.output,
        rules.install_perl_libs.output,
        PERL=rules.install_perl.output
    params: dir = strip_path_level(CONFIG["executables"]["braker"],1)
    output: CONFIG["executables"]["braker"]
    shell:
        "mkdir -p {params.dir} && "
        "cd {params.dir} && "
        "wget"+CONFIG['executable_sources']['wget_options']+CONFIG['executable_sources']['braker_URL']+" && "
        "tar xzf *.tar.gz && "
        "grep -l -r '#!/usr' *.pl | xargs -I '%' sed -i 's|/usr/bin/perl|/usr/bin/env perl|' % &&"
        "touch {output}"
rule tophat2:
    input:
        rules.tophat2_installation.output
    output: CONFIG["tophat2_opts"]["output"]
    shell:
        "{rules.tophat2_installation.output} -o " + CONFIG["tophat2_opts"]["output"] + " "
        " " + CONFIG["tophat2_opts"]["cl_options"] + " "
        " " + CONFIG["braker_opts"]["genome"] + " "
        " " + CONFIG["tophat2_opts"]["reads"]

rule braker:
    input:
        rules.braker_bashrc.output,
        TOPHAT2 = rules.tophat2.output,
        BRAKER=rules.braker_installation.output
    params: augustus = strip_path_level(CONFIG["executables"]["augustus"],2) 
    output: CONFIG['base']['working_dir'] + CONFIG['braker_opts']['model_name'] 
    shell:
        "mkdir -p " + CONFIG['base']['working_dir'] + " && cd " + CONFIG['base']['working_dir'] + " && "
        "source {rules.braker_bashrc.output} && "
        "{input.BRAKER} " + CONFIG["braker_opts"]["cl_options"] + " --CPU=" + CONFIG['braker_opts']['cpus'] + " "
        "--workingdir=" + CONFIG['base']['working_dir'] + " "
        "--SAMTOOLS_PATH=" + CONFIG['executables']['samtools'] + " "
        "--GENEMARK_PATH=" + CONFIG['executables']['genemark'] + " " 
        "--BAMTOOLS_PATH=" + CONFIG['executables']['bamtools'] + "/bin " 
        "--AUGUSTUS_CONFIG_PATH={params.augustus}/config " 
        "--genome=" + CONFIG['braker_opts']['genome'] + " "
        "--bam={input.TOPHAT2}/accepted_hits.bam"
