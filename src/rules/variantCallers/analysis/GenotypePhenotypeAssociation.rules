"""
@author: Jetse
@version: 0.1

The genotype phenotype association rules contain rules for calculating the genotype phenotype association.
This association indicates the chance whether a gene is involved in a given phenotype. These rules calculate
this genotype phenotype association by combining a gff file with genes with a vcf file with SNPs and a
phenotype file with the known phenotypes.
"""
###############
##  Imports  ##
###############
import xlrd, csv, os
import numpy
from scipy import stats
from rules.variantCalling.analysis import Readers
from rules.utils import ChromosomeGetter

import GenotypePhenotypeAssociation

#############
##  Rules  ##
#############
#Convert the first page of an excel-sheet to csv format
rule xlsToCsv:
    input: "{prefix}.xls"
    output: "{prefix}.csv"
    run:
        with xlrd.open_workbook(input[0]) as wb:
            with open(output[0],"w") as outFile:
                sheet = wb.sheet_by_index(0)
                csvWriter = csv.writer(outFile, csv.excel_tab)
                for row in range(sheet.nrows):
                    csvWriter.writerow(sheet.row_values(row))

#Merge all genotype phenotype association files per chromosome to one large csv file by concatenating them all
rule mergeCsv:
    input:
        index = CONFIG["mapping"]["referenceGenome"] + ".fai",
        chroms = expand("variantCalling/phased.{chrom}_{{prefix}}.genotypePhenotypeAssociation.csv",chrom=ChromosomeGetter.getChromosomes(CONFIG["mapping"]["referenceGenome"] + ".fai"))
    output: "variantCalling/all.phased.{prefix}.genotypePhenotypeAssociation.csv"
    shell: "cat {input.chroms} > {output[0]}"

#The rule which executes the actual genotype-phenotype association script.
rule genotypePhenotypeAssociation:
    input:
        vcfFile = "variantCalling/snps.{chrom}_phased.snps.{prefix}.vcf",
        phenotypeFile = os.path.splitext(CONFIG["phenotypeFile"])[0] + ".csv"
    output: "variantCalling/phased.{chrom}_{prefix}.genotypePhenotypeAssociation.csv"
    params:
        gffFile = CONFIG["gffFile"]
    run:
        LociFinder().findLoci(input.vcfFile, wildcards.chrom, input.phenotypeFile, params.gffFile, output[0])
