"""
@author: Jetse / Jan van Haarst
@version: 0.2

Trimming of fastq files with FastqMcf. For usage, include this in your workflow.

Usage: fastq-mcf [options] <adapters.fa> <reads.fq> [mates1.fq ...]
    Version: 1.04.636

    Detects levels of adapter presence, computes likelihoods and
    locations (start, end) of the adapters.   Removes the adapter
    sequences from the fastq file(s).

    Stats go to stderr, unless -o is specified.

    Specify -0 to turn off all default settings

    If you specify multiple 'paired-end' inputs, then a -o option is
    required for each.  IE: -o read1.clip.q -o read2.clip.fq

    Options:
        -h       This help
        -o FIL   Output file (stats to stdout)
        -s N.N   Log scale for adapter minimum-length-match (2.2)
        -t N     % occurance threshold before adapter clipping (0.25)
        -m N     Minimum clip length, overrides scaled auto (1)
        -p N     Maximum adapter difference percentage (10)
        -l N     Minimum remaining sequence length (19)
        -L N     Maximum remaining sequence length (none)
        -D N     Remove duplicate reads : Read_1 has an identical N bases (0)
        -k N     sKew percentage-less-than causing cycle removal (2)
        -x N     'N' (Bad read) percentage causing cycle removal (20)
        -q N     quality threshold causing base removal (10)
        -w N     window-size for quality trimming (1)
        -H       remove >95% homopolymer reads (no)
        -0       Set all default parameters to zero/do nothing
        -U|u     Force disable/enable Illumina PF filtering (auto)
        -P N     Phred-scale (auto)
        -R       Dont remove Ns from the fronts/ends of reads
        -n       Dont clip, just output what would be done
        -C N     Number of reads to use for subsampling (300k)
        -S       Save all discarded reads to '.skip' files
        -d       Output lots of random debugging stuff

    Quality adjustment options:
        --cycle-adjust    CYC,AMT     Adjust cycle CYC (negative = offset from end) by amount AMT
        --phred-adjust    SCORE,AMT   Adjust score SCORE by amount AMT

    Filtering options*:
        --[mate-]qual-mean  NUM       Minimum mean quality score
        --[mate-]qual-gt    NUM,THR   At least NUM quals > THR
        --[mate-]max-ns     NUM       Maxmium N-calls in a read (can be a %)
        --[mate-]min-len    NUM       Minimum remaining length (same as -l)
        --hompolymer-pct    PCT       Homopolymer filter percent (95)

    If mate- prefix is used, then applies to second non-barcode read only

    Adapter files are 'fasta' formatted:

    Specify n/a to turn off adapter clipping, and just use filters

    Increasing the scale makes recognition-lengths longer, a scale
    of 100 will force full-length recognition of adapters.

    Adapter sequences with _5p in their label will match 'end's,
    and sequences with _3p in their label will match 'start's,
    otherwise the 'end' is auto-determined.

    Skew is when one cycle is poor, 'skewed' toward a particular base.
    If any nucleotide is less than the skew percentage, then the
    whole cycle is removed.  Disable for methyl-seq, etc.

    Set the skew (-k) or N-pct (-x) to 0 to turn it off (should be done
    for miRNA, amplicon and other low-complexity situations!)

    Duplicate read filtering is appropriate for assembly tasks, and
    never when read length < expected coverage.  -D 50 will use
    4.5GB RAM on 100m DNA reads - be careful. Great for RNA assembly.

    *Quality filters are evaluated after clipping/trimming

Expects a global variable CONFIG (e.g. parsed from json) of at least the following structure:
{
    "illuminaAdapters": "/path/to/adapters",
    "fastqmcf":{
        "dupLen": "60",
        "optionalOptions": ""
    }
}

Expects the input files in the working directory. For paired end data the files have to end with _1.fastq (forward reads) and
_2.fastq (reversed reads).
"""

###############
##  Imports  ##
###############
import collections, subprocess
from SnakeMakeVlpb import strip_path_level

#################
##  Fastq-mcf  ##
#################

# Download and install fastq-mcf
rule fastqmcf_installation:
    output: CONFIG["executables"]["fastq-mcf"]
    params : dir = strip_path_level(CONFIG['executables']['fastq-mcf'],2)
    threads : 999
    shell:
        # "set -o xtrace;"
        # "set -o verbose;"
        "TEMPDIR=`mktemp -d`;"
        "cd $TEMPDIR;"
        "svn checkout  " + CONFIG['executable_sources']['fastqmcf_URL'] + " ea-utils-read-only && "
        "cd ea-utils-read-only/clipper && "
        "mkdir -p {params.dir} && "
        "PREFIX={params.dir} make -j {threads} install && "
        "touch {output} && "
        "cd / && rm -rf $TEMPDIR;"

ruleorder: fastqMcfPaired > fastqMcfSingle

rule fastqMcfPaired:
    input:
        FASTQMCF = rules.fastqmcf_installation.output,
        forward = "cleaned/{sample}/{library}/{readset}/{name}_1.fastq.gz",
        reversed = "cleaned/{sample}/{library}/{readset}/{name}_2.fastq.gz"
    output:
        forward = temp("dedup/{sample}/{library}/{readset}/{name}_1.fastq"),
        reversed = temp("dedup/{sample}/{library}/{readset}/{name}_2.fastq")
    params:
        OPTIONALPARAMS=CONFIG["fastqmcf"]["optionalOptions"],
        DUPLEN = CONFIG["fastqmcf"]["dupLen"],
        ADAPTERFILE = CONFIG["illuminaAdapters"]
    shell:
        "{input.FASTQMCF} "
        "{params.OPTIONALPARAMS} "
        "-D {params.DUPLEN} "
        "-o {output.forward} "
        "-o {output.reversed} "
        "{ADAPTERFILE} "
        "{input.forward} "
        "{input.reversed}"

rule fastqMcfSingle:
    input:
        FASTQMCF = rules.fastqmcf_installation.output,
        READS = "cleaned/{sample}/{library}/{readset}/{name,[^_]}.fastq.gz",
    output: temp("dedup/{sample}/{library}/{readset}/{name,[^_]}.fastq.gz")
    params:
        OPTIONALPARAMS=CONFIG["fastqmcf"]["optionalOptions"],
        DUPLEN = CONFIG["fastqmcf"]["dupLen"],
        ADAPTERFILE = CONFIG["illuminaAdapters"]
    shell:
        "{input.FASTQMCF} "
        "{params.OPTIONALPARAMS} "
        "-D {params.DUPLEN} "
        "-o {output} "
        "{params.ADAPTERFILE} "
        "{input.READS}"
