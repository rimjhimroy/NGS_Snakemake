"""
@author: Jetse Jacobi
@version: 0.1

"Celera Assembler is a de novo whole-genome shotgun (WGS) DNA sequence assembler.
It reconstructs long sequences of genomic DNA from fragmentary data produced by whole-genome shotgun sequencing.
Celera Assembler was developed at Celera Genomics starting in 1999. It was released to SourceForge in 2004 as the
wgs-assembler under the GNU General Public License. The pipeline revised for 454 data was named CABOG."

Expects a global variable CONFIG (e.g. parsed from json) of at least the following structure:
{
    "maxMem" : 200000000,
    "libraries":{
        "fragData":{
            "reads" : ["/home/jaco001/beauveriaBassiana/1520/raw/1520.L180_SZABPI034205-52_1.fq","/home/jaco001/beauveriaBassiana/1520/raw/1520.L180_SZABPI034205-52_2.fq"],
            "type" : "pe",
            "insertSize" : 180,
            "insertSizeStdev" : 36,
            "readlen" : 100,
            "platform" : "illumina"
        }
    },
    "wgs":{
        "input":{
            "fragData":["../preprocessing/trim.fragData_1.fastq"]
        }
    }
}

"""
###############
##  Imports  ##
###############
import math, os, subprocess
import Wgs

##########################
##  WGS assembler rules ##
##########################
WGS_VERSION = re.compile("CA version CA (.*?) \(").search(subprocess.Popen("runCA -version", shell=True, stderr=subprocess.PIPE).stderr.read().decode("utf-8")).group(1).strip()


rule wgsExecution:
    input: expand("assembly/{sample}.frg",sample=CONFIG["wgs"]["input"].keys())
    output: "assembly/wgs/9-terminator/assembly.ctg.fasta"
    version: WGS_VERSION
    run:
        specFile = SpecFile("assembly/wgs.cnf",CONFIG["maxMem"],threads)
        shell("runCA -d assembly/wgs/ -p assembly -s {specFile} {inputFiles}".format(specFile=specFile.fileName, inputFiles=" ".join(input)))


rule fastqToCa:
    input: lambda wildcards: CONFIG["wgs"]["input"][wildcards.sample]
    output: "assembly/{sample}.frg"
    version: WGS_VERSION
    run:
        if len(input) == 2:
            shell("fastqToCA -insertsize {insSize} {insDev} -libraryname {sample} -technology {tech} {direction} -mates {input[0]},{input[1]} "
                      "> {output[0]}".format(
                                             insSize=CONFIG["libraries"][wildcards.sample]["insertSize"],
                                             insDev=CONFIG["libraries"][wildcards.sample]["insertSizeStdev"],
                                             sample=wildcards.sample,
                                             tech=getTech(CONFIG["libraries"][wildcards.sample]["platform"], CONFIG["libraries"][wildcards.sample]["readlen"]),
                                             direction=getOrientation(CONFIG["libraries"][wildcards.sample]["type"]),
                                             input=input,
                                             output=output))
        else:
            shell("fastqToCA -technology {tech} -reads {input[0]} > {output[0]}"
                  "".format(
                            tech=getTech(CONFIG["libraries"][wildcards.sample]["platform"], CONFIG["libraries"][wildcards.sample]["readlen"]),
                            input=input,
                            output=output
                            ))

rule wgsCleanup:
    input: "assembly/wgs/9-terminator/assembly.ctg.fasta"
    output: "assembly/wgs.contigs.fasta"
    shell: "mv {input[0]} {output[0]}; rm -r assembly/wgs"

