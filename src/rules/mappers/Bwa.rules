"""
@version: 0.1
@author: Jetse
@attention: Untested!

Mapping with BWA.
"""

from qualityControl.files import BamFile
import subprocess

ruleorder: bwaMemPaired > bwaMemSingle

# Download and install bwa
rule bwa_installation:
    output: CONFIG["bwa"]["path"] + 'bwa'
    shell:
        "TEMPDIR=`mktemp -d`;"
        "cd $TEMPDIR;"
        "git clone "+CONFIG['bwa']['URL']+" && "
        "cd bwa && "
        "make && "
        "mv bwa {output} &&"
        "touch {output} && "
        "cd / && rm -rf $TEMPDIR;"

rule bwaSampe:
    input:
        BWA=rules.bwa_installation.output,
        forward = "processed/{prefix}_1.fastq",
        reversed = "processed/{prefix}_2.fastq",
        forwardSai = "mapped/{prefix}_1.sai",
        reversedSai = "mapped/{prefix}_2.sai",
        refGenome = CONFIG["refGenome"],
        refGenomeIndex = CONFIG["refGenome"] + ".pac"
    output: temp("mapped/bwaSampe.{prefix}.sam")
    params:
        optionalOpts = CONFIG["bwaSampe"]["optionalOpts"]
    run:
        shell("{input.BWA} sampe {params.optionalOpts} {input.refGenome}  "
              "{input.forwardSai} {input.reversedSai} {input.forward} {input.reversed} > {output[0]}".format(params=params, input=input, output=output))
        BamFile.BamFile(output[0], sam=True).isValid()

rule bwaSamse:
    input:
        BWA=rules.bwa_installation.output,
        reads = "processed/{prefix}.fastq",
        readsSai = "mapped/{prefix}.sai",
        refGenome = CONFIG["refGenome"],
        refGenomeIndex = CONFIG["refGenome"] + ".pac"
    output: temp("mapped/bwaSamse.{prefix}.sam")
    params:
        optionalOpts = CONFIG["bwaSamse"]["optionalOpts"]
    run:
        shell("{input.BWA} samse {params.optionalOpts} {input.refGenome}  "
              "{input.readsSai} {input.reads} > {output[0]".format(params=params, input=input))
        BamFile.BamFile(output[0], sam=True).isValid()

rule bwaAln:
    input:
        BWA=rules.bwa_installation.output,
        reads = "processed/{prefix}.fastq",
        refGenome = CONFIG["refGenome"],
        refGenomeIndex = CONFIG["refGenome"] + ".pac"
    output: "mapped/{prefix}.sai"
    params:
        optionalOpts = CONFIG["bwaAln"]["optionalOpts"]
    shell: "{input.BWA} aln -t {threads} {input.refGenome} {input.reads} > {output[0]}"

rule bwaIndex:
    input:
        BWA=rules.bwa_installation.output,
        fasta = CONFIG["refGenome"]
    output: CONFIG["refGenome"] + ".pac"
    shell: "{input.BWA} index {input.fasta}"

rule bwaMemPaired:
    input:
        BWA=rules.bwa_installation.output,
        forward = "processed/trim.{sample}_1.fastq",
        reversed = "processed/trim.{sample}_2.fastq",
        refGenome = CONFIG["refGenome"],
        refGenomeIndex = CONFIG["refGenome"] + ".pac"
    output: temp("mapped/bwaMem.{sample}.sam")
    threads: 8
    params:
        optionalOpts = CONFIG["bwaMem"]["optionalOpts"]
    shell: "{input.BWA} mem -t {threads} {params.optionalOpts} {input.refGenome} {input.forward} {input.reversed} > {output[0]}"

rule bwaMemSingle:
    input:
        BWA=rules.bwa_installation.output,
        reads = "processed/{prefix}.fastq",
        refGenome = CONFIG["refGenome"],
        refGenomeIndex = CONFIG["refGenome"] + ".pac"
    output: temp("mapped/bwaMem.{prefix}.sam")
    threads: 8
    params:
        optionalOpts = CONFIG["bwaMem"]["optionalOpts"]
    shell: "{input.BWA} mem -t {threads} {input.refGenome} {input.reads} > {output[0]}"
