"""
@version: 0.1
@author: Jetse

Mapping with BWA.
"""

from qualityControl.files import BamFile
import subprocess

#ruleorder: bwaMemPaired > bwaMemSingle

# Download and install bwa
rule bwa_installation:
    output: CONFIG["executables"]["bwaMem"] + "bwa"
    shell:
        "TEMPDIR=`mktemp -d`;"
        "cd $TEMPDIR;"
        "git clone "+CONFIG['executable_sources']['bwa_URL']+" && "
        "cd bwa && "
        "make && "
        "mv bwa {output} &&"
        "touch {output} && "
        "cd / && rm -rf $TEMPDIR;"

rule bwaIndex:
    input:
        BWA=rules.bwa_installation.output,
        fasta = CONFIG["refGenome"]
    output: CONFIG["refGenome"] + ".pac"
    shell: "{input.BWA} index {input.fasta}"

rule bwaMemPaired:
    input:
        BWA=rules.bwa_installation.output,
        forward = "trimmed/{sample}/{lib}/{readset}/{name}_1.fastq.gz",
        reversed = "trimmed/{sample}/{lib}/{readset}/{name}_2.fastq.gz",
        refGenome = CONFIG["refGenome"],
        refGenomeIndex = CONFIG["refGenome"] + ".pac"
    output: temp("mapped/{sample}/{lib}/{readset}/{name}.sam")
    threads: 8
    params:
        optionalOpts = CONFIG["bwaMem"]["optionalOpts"]
    shell: "{input.BWA} mem -t {threads} {params.optionalOpts} {input.refGenome} {input.forward} {input.reversed} > {output[0]}"


#TODO BWAmem Single:

#rule bwaMemSingle:
#    input:
#        BWA=rules.bwa_installation.output,
#        reads = "trimmed/{sample}/{lib}/{readset}/{name}_se.fastq.gz",
#        refGenome = CONFIG["refGenome"],
#        refGenomeIndex = CONFIG["refGenome"] + ".pac"
#    output: temp("mapped/{sample}/{lib}/{readset}/{name}.sam")
#    threads: 8
#    params:
#        optionalOpts = CONFIG["bwaMem"]["optionalOpts"]
#    shell: "{input.BWA} mem -t {threads} {input.refGenome} {input.reads} > {output[0]}"
