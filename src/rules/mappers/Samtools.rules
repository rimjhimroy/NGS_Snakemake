"""
@version:0.1
@author: Jetse

The Samtools module contains all rules for manipulating bam files with samtools.


"""
import subprocess, re

# Download and install samtools
rule samtools_installation:
    output: CONFIG["executables"]["samtools"] + 'samtools'
    shell:
        "TEMPDIR=`mktemp -d`;"
        "cd $TEMPDIR;"
        "git clone " +CONFIG["executable_sources"]['samtools_URL'] + " && "
        "git clone " +CONFIG['executable_sources']['htslib_URL'] + " && "
        "cd samtools && "
        "make && "
        "mv samtools {output} &&"
        "touch {output} && "
        "cd / && rm -rf $TEMPDIR;"

rule samToBam:
    input:
        SAMTOOLS=rules.samtools_installation.output,
        SAM="mapped/{sample}/{lib}/{readset}/{name}.sam"
    output: temp("mapped/{sample}/{lib}/{readset}/{name}.bam")
    shell: "{input.SAMTOOLS} view -bS {input.SAM} > {output}"

rule indexBam:
    input:
        SAMTOOLS=rules.samtools_installation.output,
        BAM="processedbam/{prefix}.bam"
    output: "processedbam/{prefix}.bam.bai"
    shell: "{input.SAMTOOLS} index {input.BAM}"

rule sortBam:
    input:
        SAMTOOLS=rules.samtools_installation.output,
        BAM="mapped/{sample}/{lib}/{readset}/{name}.bam"
    output: "mapped.sorted/{sample}/{lib}/{readset}/{name}.bam"
    shell: "{input.SAMTOOLS} sort -o {input.BAM} {output} > {output}"

def selectBam(wildcards):
#    bams, = glob_wildcards("mapped/"+str(wildcards)+"/{bams}.bam")
    bams, = glob_wildcards("reads/"+str(wildcards)+"/{bams}_1.fastq.gz")
    return expand("mapped.sorted/{S}/{B}.bam", S=wildcards, B=bams)
     
rule mergeBam:
    input:
        SAMTOOLS=rules.samtools_installation.output,
	BAM=selectBam
    output: "mapped/merged.sort.{sample}.bam"
    run: 
        if len(input.BAM) < 2:
            shell("cp {input.BAM} {output}")
        else:
            shell("{input.SAMTOOLS} merge {output} {input.BAM}") 

#rule addMdTag:
#    input:
#        SAMTOOLS=rules.samtools_installation.output,
#        BAM="mapped/merged.{sample}.bam",
#        REFERENCE=CONFIG["refGenome"]
#    output: "mapped/MD.merged.{sample}.bam"
#    shell: "{input.SAMTOOLS} calmd {input.BAM} {input.REFERENCE} > {output}"

rule faidX:
    input:
        SAMTOOLS=rules.samtools_installation.output,
        FASTA=CONFIG["refGenome"]
    output: CONFIG["refGenome"] + ".fai"
    shell: "{input.SAMTOOLS} faidx {input.FASTA}"
