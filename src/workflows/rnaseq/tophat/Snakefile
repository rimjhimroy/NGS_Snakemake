"""
Run the maker annotation pipeline
"""

import json, os, inspect
import configparser
import io

__author__ = "Jan van Haarst"
__email__ = "jan.vanhaarst@wur.nl"

# Get lib configuration
# Set PYTHONPATH before running Snakemake :
# export PYTHONPATH=$PYTHONPATH:/home/haars001/scratch/projects/VLPB/

from SnakeMakeVlpb import VLPB_LIB_PATH
from SnakeMakeVlpb.src.utils import CreateSymlinkReads
from SnakeMakeVlpb.src.utils.StripPathLevel import strip_path_level

ruleDir = VLPB_LIB_PATH + "rules/"

workdir: os.getcwd()
"""
Recursive function to do a string format on each of the string values in the config.
    Full replace on a JSON does not work: it uses '{}' for formatting, which results
    in errors.
"""
def replace_paths_in_json(conf, paths):
    for item in conf:
        if isinstance(conf[item], str): #is it a string value?
            conf[item] = conf[item].format(**paths) #use json to replace values
        elif isinstance(conf[item], dict): # is this a json object (dict) ?
            replace_paths_in_json(conf[item], paths) # parse object

# Get the config file:
with open("config.json") as conf:
    with open("paths.json") as paths:
        PATHS = json.load(paths)
        CONFIG = json.load(conf)
        replace_paths_in_json(CONFIG, PATHS)

# Create symlinks to the readfiles in structured folders, original location of data in JSON
CreateSymlinkReads.createSymlinks(CONFIG)

# Get info from symlinked files
SAMPLES,LIBRARIES,REPLICATES,NAMES,=glob_wildcards("reads/{sample}/{library}/{replicate}/{name}.fastq.gz")

# Include necessary rules
include: ruleDir + "/mappers/Bowtie.rules"
include: ruleDir + "/rnaseq/Tophat.rules"
include: ruleDir + "/fastqProcessors/FastQC.rules"
include: ruleDir + "/fastqProcessors/readfq.rules"

rule all:
    input:
        CONFIG['base']['bashrc'], # Needs to be always separately defined !
        expand("FASTQC/{sample}/{library}/{replicate}/{name}_fastqc.zip",
                zip,
                library=LIBRARIES,
                replicate=REPLICATES,
                name=NAMES,
                sample=SAMPLES),
        "READFQ/counts",
        expand("TOPHAT/{sample}/{library}/{replicate}/{name}/accepted_hits.bam",
            zip,
            sample=SAMPLES,
            library=LIBRARIES,
            replicate=REPLICATES,
            name=NAMES
            )